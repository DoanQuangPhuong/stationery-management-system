/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hethongquanlycuahangvanphongpham;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Locale;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author MSI-VN
 */
public class ThongKe extends javax.swing.JFrame {
        PreparedStatement pst = null;
        ResultSet resultSet = null;
        int columns,rows = 0;
        float tongDoanhThu;
    /**
     * Creates new form ThongKe
     */
    public ThongKe() {
        initComponents();
          this.setLocationRelativeTo(null);
        JdateTK.setLocale(new Locale("vi", "VN"));//Chuyển kiểu về định dạng dd mm yyyy
        JdateTK.setDateFormatString("dd/MM/yyyy");
        load();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDay = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        JdateTK = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_ThongKeHoaDon = new javax.swing.JTable();
        btn_ThongKe = new javax.swing.JButton();
        btn_closeTK = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lable12 = new javax.swing.JLabel();
        lb_TongTienTK = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lb_SoLuongDH = new javax.swing.JLabel();
        rb_Nam = new javax.swing.JRadioButton();
        rb_Thang = new javax.swing.JRadioButton();
        lb_SLDH = new javax.swing.JLabel();
        lb_SL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("Thông Kê Doanh Thu");

        tb_ThongKeHoaDon.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        tb_ThongKeHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Hóa Đơn", "Sản Phẩm", "Số Lượng", "Giá", "Ngày Mua"
            }
        ));
        tb_ThongKeHoaDon.setRowHeight(27);
        tb_ThongKeHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_ThongKeHoaDonMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb_ThongKeHoaDon);

        btn_ThongKe.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btn_ThongKe.setText("Thông Kê");
        btn_ThongKe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ThongKeActionPerformed(evt);
            }
        });

        btn_closeTK.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btn_closeTK.setText("Thoát");
        btn_closeTK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_closeTKActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Tổng doanh thu : ");

        lable12.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        lable12.setForeground(new java.awt.Color(255, 0, 51));
        lable12.setText("đ");

        lb_TongTienTK.setFont(new java.awt.Font("Times New Roman", 0, 25)); // NOI18N
        lb_TongTienTK.setForeground(new java.awt.Color(255, 0, 0));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Số Lượng đơn hàng : ");

        lb_SoLuongDH.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        btnDay.add(rb_Nam);
        rb_Nam.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        rb_Nam.setText("Năm");
        rb_Nam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_NamActionPerformed(evt);
            }
        });

        btnDay.add(rb_Thang);
        rb_Thang.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        rb_Thang.setText("Tháng");
        rb_Thang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rb_ThangActionPerformed(evt);
            }
        });

        lb_SLDH.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        lb_SL.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(317, 317, 317)
                        .addComponent(btn_closeTK, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lb_SoLuongDH)
                        .addGap(413, 413, 413))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rb_Thang)
                                .addGap(18, 18, 18)
                                .addComponent(rb_Nam)
                                .addGap(51, 51, 51)
                                .addComponent(JdateTK, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(912, 912, 912)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lable12, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lb_TongTienTK, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lb_SL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lb_SLDH))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(569, 569, 569)
                        .addComponent(btn_ThongKe, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(117, 117, 117))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btn_closeTK, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JdateTK, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rb_Nam)
                        .addComponent(rb_Thang)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lb_SoLuongDH)
                        .addComponent(lb_SLDH)
                        .addComponent(lb_SL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lable12)
                        .addComponent(lb_TongTienTK, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15)
                .addComponent(btn_ThongKe, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void load()
    {
        DefaultTableModel TablePN = (DefaultTableModel)tb_ThongKeHoaDon.getModel();
        int SelectedRows = tb_ThongKeHoaDon.getSelectedRow();
        Connection con = ConnectionDB.getConnectDB();
        String sql = "SELECT h.MaHD,sp.TenSanPham,ct.SoLuong,ct.Gia,h.NgayMua FROM htquanlycuahangvanphongpham.hoadon h " +
                    "INNER JOIN htquanlycuahangvanphongpham.chitiethoadon ct on h.MaHD = ct.MaHD " +
                    "INNER JOIN htquanlycuahangvanphongpham.sanpham sp on ct.MaSanPham = sp.MaSanPham";
        try
        {
            pst = con.prepareStatement(sql);
            resultSet = pst.executeQuery();

            ResultSetMetaData stData = resultSet.getMetaData();
            columns = stData.getColumnCount();
 
            DefaultTableModel TableCK= (DefaultTableModel)tb_ThongKeHoaDon.getModel();
            TableCK.setRowCount(0);
            while(resultSet.next()){
                Vector columnData = new Vector();
                for(int i=1; i<=columns; i++)
                {
                    columnData.add(resultSet.getString("MaHD"));
                    columnData.add(resultSet.getString("TenSanPham"));
                    columnData.add(resultSet.getString("SoLuong"));
                    columnData.add(resultSet.getString("Gia"));
                    columnData.add(resultSet.getString("NgayMua"));
                }
                TableCK.addRow(columnData);
            }
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
        ConnectionDB.closeConnectionDB(con);
    }
    private void tb_ThongKeHoaDonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_ThongKeHoaDonMouseClicked
        
    }//GEN-LAST:event_tb_ThongKeHoaDonMouseClicked

    private void btn_ThongKeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ThongKeActionPerformed
        java.util.Date utilDate = JdateTK.getDate();
        java.sql.Date selectedDate = new java.sql.Date(utilDate.getTime());
        int month = selectedDate.getMonth() + 1;
        int year = selectedDate.getYear()+ 1900;
        if(!rb_Thang.isSelected()&&!rb_Nam.isSelected())
        {
            DefaultTableModel TablePN = (DefaultTableModel)tb_ThongKeHoaDon.getModel();
            int SelectedRows = tb_ThongKeHoaDon.getSelectedRow();
            Connection con = ConnectionDB.getConnectDB();
            String sql = "SELECT h.MaHD,sp.TenSanPham,ct.SoLuong,ct.Gia,h.NgayMua FROM htquanlycuahangvanphongpham.hoadon h " +
                        "INNER JOIN htquanlycuahangvanphongpham.chitiethoadon ct on h.MaHD = ct.MaHD " +
                        "INNER JOIN htquanlycuahangvanphongpham.sanpham sp on ct.MaSanPham = sp.MaSanPham WHERE h.NgayMua = ?";
            try
            {
                tongDoanhThu = 0;
                pst = con.prepareStatement(sql);
                pst.setDate(1, selectedDate);
                resultSet = pst.executeQuery();
                ResultSetMetaData stData = resultSet.getMetaData();
                columns = stData.getColumnCount();
                DefaultTableModel TableCK= (DefaultTableModel)tb_ThongKeHoaDon.getModel();
                TableCK.setRowCount(0);
                while(resultSet.next()){
                    int sl = Integer.parseInt(resultSet.getString("SoLuong"));
                    float gia = Float.parseFloat(resultSet.getString("Gia"));
                    Vector columnData = new Vector();
                    for(int i=1; i<=columns; i++)
                    {
                        columnData.add(resultSet.getString("MaHD"));
                        columnData.add(resultSet.getString("TenSanPham"));
                        columnData.add(resultSet.getString("SoLuong"));
                        columnData.add(resultSet.getString("Gia"));
                        columnData.add(resultSet.getString("NgayMua"));
                    }
                    TableCK.addRow(columnData);
                    tongDoanhThu += (sl * gia);
                }
                rows = TableCK.getRowCount();
                lb_SL.setText(String.valueOf(rows));
                lb_TongTienTK.setText(String.valueOf(tongDoanhThu));
            }
            catch(Exception ex){
                JOptionPane.showMessageDialog(null, ex);
            }
            ConnectionDB.closeConnectionDB(con);
            }
        else
        {
            if(rb_Thang.isSelected())
            {
                DefaultTableModel TablePN = (DefaultTableModel)tb_ThongKeHoaDon.getModel();
                int SelectedRows = tb_ThongKeHoaDon.getSelectedRow();
                Connection con = ConnectionDB.getConnectDB();
                String sql = "SELECT h.MaHD,sp.TenSanPham,ct.SoLuong,ct.Gia,h.NgayMua FROM htquanlycuahangvanphongpham.hoadon h " +
                            "INNER JOIN htquanlycuahangvanphongpham.chitiethoadon ct on h.MaHD = ct.MaHD " +
                            "INNER JOIN htquanlycuahangvanphongpham.sanpham sp on ct.MaSanPham = sp.MaSanPham where MONTH(h.NgayMua) = ?";
                try
                {
                    tongDoanhThu = 0;
                    pst = con.prepareStatement(sql);
                    pst.setInt(1,month);
                    resultSet = pst.executeQuery();

                    ResultSetMetaData stData = resultSet.getMetaData();
                    columns = stData.getColumnCount();
                    DefaultTableModel TableCK= (DefaultTableModel)tb_ThongKeHoaDon.getModel();
                    TableCK.setRowCount(0);
                    while(resultSet.next()){
                        int sl = Integer.parseInt(resultSet.getString("SoLuong"));
                        float gia = Float.parseFloat(resultSet.getString("Gia"));
                        Vector columnData = new Vector();
                        for(int i=1; i<=columns; i++)
                        {
                            columnData.add(resultSet.getString("MaHD"));
                            columnData.add(resultSet.getString("TenSanPham"));
                            columnData.add(resultSet.getString("SoLuong"));
                            columnData.add(resultSet.getString("Gia"));
                            columnData.add(resultSet.getString("NgayMua"));
                        }
                        TableCK.addRow(columnData);
                        tongDoanhThu += (sl * gia);
                    }
                    rows = TableCK.getRowCount();
                    lb_SL.setText(String.valueOf(rows));
                    lb_TongTienTK.setText(String.valueOf(tongDoanhThu));
                }
                catch(Exception ex){
                    JOptionPane.showMessageDialog(null, ex);
                }
                ConnectionDB.closeConnectionDB(con);
            }
            else
            {
                DefaultTableModel TablePN = (DefaultTableModel)tb_ThongKeHoaDon.getModel();
                int SelectedRows = tb_ThongKeHoaDon.getSelectedRow();
                Connection con = ConnectionDB.getConnectDB();
                String sql = "SELECT h.MaHD,sp.TenSanPham,ct.SoLuong,ct.Gia,h.NgayMua FROM htquanlycuahangvanphongpham.hoadon h " +
                            "INNER JOIN htquanlycuahangvanphongpham.chitiethoadon ct on h.MaHD = ct.MaHD " +
                            "INNER JOIN htquanlycuahangvanphongpham.sanpham sp on ct.MaSanPham = sp.MaSanPham where YEAR(h.NgayMua) = ?";
                try
                {
                    tongDoanhThu = 0;
                    pst = con.prepareStatement(sql);
                    pst.setInt(1,year);
                    resultSet = pst.executeQuery();

                    ResultSetMetaData stData = resultSet.getMetaData();
                    columns = stData.getColumnCount();
                    DefaultTableModel TableCK= (DefaultTableModel)tb_ThongKeHoaDon.getModel();
                    TableCK.setRowCount(0);
                    while(resultSet.next()){
                        int sl = Integer.parseInt(resultSet.getString("SoLuong"));
                        float gia = Float.parseFloat(resultSet.getString("Gia"));
                        Vector columnData = new Vector();
                        for(int i=1; i<=columns; i++)
                        {
                            columnData.add(resultSet.getString("MaHD"));
                            columnData.add(resultSet.getString("TenSanPham"));
                            columnData.add(resultSet.getString("SoLuong"));
                            columnData.add(resultSet.getString("Gia"));
                            columnData.add(resultSet.getString("NgayMua"));
                        }
                        TableCK.addRow(columnData);
                        tongDoanhThu += (sl * gia);
                    }
                    rows = TableCK.getRowCount();
                    lb_SL.setText(String.valueOf(rows));
                    lb_TongTienTK.setText(String.valueOf(tongDoanhThu));
                }
                catch(Exception ex){
                    JOptionPane.showMessageDialog(null, ex);
                }
                ConnectionDB.closeConnectionDB(con);
            }
        }
    }//GEN-LAST:event_btn_ThongKeActionPerformed

    private void btn_closeTKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_closeTKActionPerformed
         if(JOptionPane.showConfirmDialog(this, "Bạn có muốn thoát khỏi ứng dụng này không?", "Thoát khỏi ứng dụng", JOptionPane.YES_NO_OPTION)== JOptionPane.YES_OPTION)
        {
            this.dispose();
        }
    }//GEN-LAST:event_btn_closeTKActionPerformed

    private void rb_NamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_NamActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rb_NamActionPerformed

    private void rb_ThangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rb_ThangActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rb_ThangActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThongKe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThongKe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThongKe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThongKe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThongKe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser JdateTK;
    private javax.swing.ButtonGroup btnDay;
    private javax.swing.JButton btn_ThongKe;
    private javax.swing.JButton btn_closeTK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lable12;
    private javax.swing.JLabel lb_SL;
    private javax.swing.JLabel lb_SLDH;
    private javax.swing.JLabel lb_SoLuongDH;
    private javax.swing.JLabel lb_TongTienTK;
    private javax.swing.JRadioButton rb_Nam;
    private javax.swing.JRadioButton rb_Thang;
    private javax.swing.JTable tb_ThongKeHoaDon;
    // End of variables declaration//GEN-END:variables
}
